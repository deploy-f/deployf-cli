// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApplicationVolumeDto application volume dto
//
// swagger:model ApplicationVolumeDto
type ApplicationVolumeDto struct {

	// id
	ID int32 `json:"id,omitempty"`

	// path
	// Required: true
	// Max Length: 1000
	Path *string `json:"path"`

	// size
	// Maximum: 2.147483647e+09
	// Minimum: 1.048576e+06
	Size int64 `json:"size,omitempty"`
}

// Validate validates this application volume dto
func (m *ApplicationVolumeDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationVolumeDto) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	if err := validate.MaxLength("path", "body", string(*m.Path), 1000); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationVolumeDto) validateSize(formats strfmt.Registry) error {

	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := validate.MinimumInt("size", "body", int64(m.Size), 1.048576e+06, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("size", "body", int64(m.Size), 2.147483647e+09, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationVolumeDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationVolumeDto) UnmarshalBinary(b []byte) error {
	var res ApplicationVolumeDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
