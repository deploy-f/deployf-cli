// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ReadyApplicationDetailsDto ready application details dto
//
// swagger:model ReadyApplicationDetailsDto
type ReadyApplicationDetailsDto struct {

	// config files
	ConfigFiles []*KeyValuePairStringString `json:"configFiles"`

	// docker image
	DockerImage string `json:"dockerImage,omitempty"`

	// env vars
	EnvVars []*KeyValuePairStringString `json:"envVars"`

	// id
	ID int32 `json:"id,omitempty"`

	// image Url
	ImageURL string `json:"imageUrl,omitempty"`

	// labels
	Labels []string `json:"labels"`

	// name
	Name string `json:"name,omitempty"`

	// parameters
	Parameters []*ReadyApplicationParameterDto `json:"parameters"`

	// ports
	Ports []*KeyValuePairStringInt32 `json:"ports"`

	// start limit CPU
	StartLimitCPU float32 `json:"startLimitCPU,omitempty"`

	// start limit RAM
	StartLimitRAM float32 `json:"startLimitRAM,omitempty"`

	// volumes
	Volumes []*KeyValuePairStringInt32 `json:"volumes"`
}

// Validate validates this ready application details dto
func (m *ReadyApplicationDetailsDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigFiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvVars(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReadyApplicationDetailsDto) validateConfigFiles(formats strfmt.Registry) error {

	if swag.IsZero(m.ConfigFiles) { // not required
		return nil
	}

	for i := 0; i < len(m.ConfigFiles); i++ {
		if swag.IsZero(m.ConfigFiles[i]) { // not required
			continue
		}

		if m.ConfigFiles[i] != nil {
			if err := m.ConfigFiles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("configFiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReadyApplicationDetailsDto) validateEnvVars(formats strfmt.Registry) error {

	if swag.IsZero(m.EnvVars) { // not required
		return nil
	}

	for i := 0; i < len(m.EnvVars); i++ {
		if swag.IsZero(m.EnvVars[i]) { // not required
			continue
		}

		if m.EnvVars[i] != nil {
			if err := m.EnvVars[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("envVars" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReadyApplicationDetailsDto) validateParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	for i := 0; i < len(m.Parameters); i++ {
		if swag.IsZero(m.Parameters[i]) { // not required
			continue
		}

		if m.Parameters[i] != nil {
			if err := m.Parameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReadyApplicationDetailsDto) validatePorts(formats strfmt.Registry) error {

	if swag.IsZero(m.Ports) { // not required
		return nil
	}

	for i := 0; i < len(m.Ports); i++ {
		if swag.IsZero(m.Ports[i]) { // not required
			continue
		}

		if m.Ports[i] != nil {
			if err := m.Ports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReadyApplicationDetailsDto) validateVolumes(formats strfmt.Registry) error {

	if swag.IsZero(m.Volumes) { // not required
		return nil
	}

	for i := 0; i < len(m.Volumes); i++ {
		if swag.IsZero(m.Volumes[i]) { // not required
			continue
		}

		if m.Volumes[i] != nil {
			if err := m.Volumes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReadyApplicationDetailsDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReadyApplicationDetailsDto) UnmarshalBinary(b []byte) error {
	var res ReadyApplicationDetailsDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
