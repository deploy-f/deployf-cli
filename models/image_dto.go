// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ImageDto Информация о docker-image
//
// swagger:model ImageDto
type ImageDto struct {

	// created t s
	// Format: date-time
	CreatedTS strfmt.DateTime `json:"createdTS,omitempty"`

	// file
	// Required: true
	File *FileDto `json:"file"`

	// id
	ID int32 `json:"id,omitempty"`

	// uploaded user
	// Required: true
	UploadedUser *UserSummaryDto `json:"uploadedUser"`
}

// Validate validates this image dto
func (m *ImageDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedTS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUploadedUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImageDto) validateCreatedTS(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedTS) { // not required
		return nil
	}

	if err := validate.FormatOf("createdTS", "body", "date-time", m.CreatedTS.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ImageDto) validateFile(formats strfmt.Registry) error {

	if err := validate.Required("file", "body", m.File); err != nil {
		return err
	}

	if m.File != nil {
		if err := m.File.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("file")
			}
			return err
		}
	}

	return nil
}

func (m *ImageDto) validateUploadedUser(formats strfmt.Registry) error {

	if err := validate.Required("uploadedUser", "body", m.UploadedUser); err != nil {
		return err
	}

	if m.UploadedUser != nil {
		if err := m.UploadedUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uploadedUser")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ImageDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImageDto) UnmarshalBinary(b []byte) error {
	var res ImageDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
