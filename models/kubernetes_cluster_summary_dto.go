// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KubernetesClusterSummaryDto kubernetes cluster summary dto
//
// swagger:model KubernetesClusterSummaryDto
type KubernetesClusterSummaryDto struct {

	// active
	Active bool `json:"active,omitempty"`

	// certificate ref
	CertificateRef string `json:"certificateRef,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// dns template
	DNSTemplate string `json:"dnsTemplate,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// kubeconfig
	Kubeconfig string `json:"kubeconfig,omitempty"`

	// load balancer address
	LoadBalancerAddress string `json:"loadBalancerAddress,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// registry refs
	RegistryRefs []string `json:"registryRefs"`
}

// Validate validates this kubernetes cluster summary dto
func (m *KubernetesClusterSummaryDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubernetesClusterSummaryDto) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KubernetesClusterSummaryDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KubernetesClusterSummaryDto) UnmarshalBinary(b []byte) error {
	var res KubernetesClusterSummaryDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
