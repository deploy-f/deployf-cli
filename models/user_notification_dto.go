// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserNotificationDto user notification dto
//
// swagger:model UserNotificationDto
type UserNotificationDto struct {

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// is viewed
	IsViewed bool `json:"isViewed,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// type
	// Enum: [0 1 2]
	Type int32 `json:"type,omitempty"`
}

// Validate validates this user notification dto
func (m *UserNotificationDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserNotificationDto) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

var userNotificationDtoTypeTypePropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userNotificationDtoTypeTypePropEnum = append(userNotificationDtoTypeTypePropEnum, v)
	}
}

// prop value enum
func (m *UserNotificationDto) validateTypeEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, userNotificationDtoTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserNotificationDto) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserNotificationDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserNotificationDto) UnmarshalBinary(b []byte) error {
	var res UserNotificationDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
