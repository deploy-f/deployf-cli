// Code generated by go-swagger; DO NOT EDIT.

package domains

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DownloadTLSCertificateReader is a Reader for the DownloadTLSCertificate structure.
type DownloadTLSCertificateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DownloadTLSCertificateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDownloadTLSCertificateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDownloadTLSCertificateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDownloadTLSCertificateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDownloadTLSCertificateOK creates a DownloadTLSCertificateOK with default headers values
func NewDownloadTLSCertificateOK() *DownloadTLSCertificateOK {
	return &DownloadTLSCertificateOK{}
}

/*DownloadTLSCertificateOK handles this case with default header values.

Success
*/
type DownloadTLSCertificateOK struct {
}

func (o *DownloadTLSCertificateOK) Error() string {
	return fmt.Sprintf("[GET /v1/domains/{id}/certificate][%d] downloadTlsCertificateOK ", 200)
}

func (o *DownloadTLSCertificateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDownloadTLSCertificateUnauthorized creates a DownloadTLSCertificateUnauthorized with default headers values
func NewDownloadTLSCertificateUnauthorized() *DownloadTLSCertificateUnauthorized {
	return &DownloadTLSCertificateUnauthorized{}
}

/*DownloadTLSCertificateUnauthorized handles this case with default header values.

Unauthorized
*/
type DownloadTLSCertificateUnauthorized struct {
}

func (o *DownloadTLSCertificateUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/domains/{id}/certificate][%d] downloadTlsCertificateUnauthorized ", 401)
}

func (o *DownloadTLSCertificateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDownloadTLSCertificateForbidden creates a DownloadTLSCertificateForbidden with default headers values
func NewDownloadTLSCertificateForbidden() *DownloadTLSCertificateForbidden {
	return &DownloadTLSCertificateForbidden{}
}

/*DownloadTLSCertificateForbidden handles this case with default header values.

Forbidden
*/
type DownloadTLSCertificateForbidden struct {
}

func (o *DownloadTLSCertificateForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/domains/{id}/certificate][%d] downloadTlsCertificateForbidden ", 403)
}

func (o *DownloadTLSCertificateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
