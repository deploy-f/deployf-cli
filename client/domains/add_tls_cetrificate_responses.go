// Code generated by go-swagger; DO NOT EDIT.

package domains

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// AddTLSCetrificateReader is a Reader for the AddTLSCetrificate structure.
type AddTLSCetrificateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddTLSCetrificateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddTLSCetrificateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAddTLSCetrificateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddTLSCetrificateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddTLSCetrificateOK creates a AddTLSCetrificateOK with default headers values
func NewAddTLSCetrificateOK() *AddTLSCetrificateOK {
	return &AddTLSCetrificateOK{}
}

/*AddTLSCetrificateOK handles this case with default header values.

Success
*/
type AddTLSCetrificateOK struct {
}

func (o *AddTLSCetrificateOK) Error() string {
	return fmt.Sprintf("[PUT /v1/domains/{id}/certificate/file][%d] addTlsCetrificateOK ", 200)
}

func (o *AddTLSCetrificateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddTLSCetrificateUnauthorized creates a AddTLSCetrificateUnauthorized with default headers values
func NewAddTLSCetrificateUnauthorized() *AddTLSCetrificateUnauthorized {
	return &AddTLSCetrificateUnauthorized{}
}

/*AddTLSCetrificateUnauthorized handles this case with default header values.

Unauthorized
*/
type AddTLSCetrificateUnauthorized struct {
}

func (o *AddTLSCetrificateUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/domains/{id}/certificate/file][%d] addTlsCetrificateUnauthorized ", 401)
}

func (o *AddTLSCetrificateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddTLSCetrificateForbidden creates a AddTLSCetrificateForbidden with default headers values
func NewAddTLSCetrificateForbidden() *AddTLSCetrificateForbidden {
	return &AddTLSCetrificateForbidden{}
}

/*AddTLSCetrificateForbidden handles this case with default header values.

Forbidden
*/
type AddTLSCetrificateForbidden struct {
}

func (o *AddTLSCetrificateForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/domains/{id}/certificate/file][%d] addTlsCetrificateForbidden ", 403)
}

func (o *AddTLSCetrificateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
