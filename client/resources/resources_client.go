// Code generated by go-swagger; DO NOT EDIT.

package resources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new resources API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for resources API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetAvaiableLimits(params *GetAvaiableLimitsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAvaiableLimitsOK, error)

	GetLimits(params *GetLimitsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLimitsOK, error)

	GetOccupiedResources(params *GetOccupiedResourcesParams, authInfo runtime.ClientAuthInfoWriter) (*GetOccupiedResourcesOK, error)

	GetUsedByAppResources(params *GetUsedByAppResourcesParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsedByAppResourcesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetAvaiableLimits get avaiable limits API
*/
func (a *Client) GetAvaiableLimits(params *GetAvaiableLimitsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAvaiableLimitsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAvaiableLimitsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAvaiableLimits",
		Method:             "GET",
		PathPattern:        "/api/resources/available-limits/{user}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAvaiableLimitsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAvaiableLimitsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAvaiableLimits: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLimits get limits API
*/
func (a *Client) GetLimits(params *GetLimitsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLimitsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLimitsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLimits",
		Method:             "GET",
		PathPattern:        "/api/resources/limits/{user}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLimitsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLimitsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLimits: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOccupiedResources get occupied resources API
*/
func (a *Client) GetOccupiedResources(params *GetOccupiedResourcesParams, authInfo runtime.ClientAuthInfoWriter) (*GetOccupiedResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOccupiedResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetOccupiedResources",
		Method:             "GET",
		PathPattern:        "/api/resources/occupied-resources/{user}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOccupiedResourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOccupiedResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetOccupiedResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUsedByAppResources get used by app resources API
*/
func (a *Client) GetUsedByAppResources(params *GetUsedByAppResourcesParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsedByAppResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsedByAppResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUsedByAppResources",
		Method:             "GET",
		PathPattern:        "/api/resources/occupied-resources-app/{user}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUsedByAppResourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsedByAppResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUsedByAppResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
