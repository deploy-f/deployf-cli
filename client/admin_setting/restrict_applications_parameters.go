// Code generated by go-swagger; DO NOT EDIT.

package admin_setting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewRestrictApplicationsParams creates a new RestrictApplicationsParams object
// with the default values initialized.
func NewRestrictApplicationsParams() *RestrictApplicationsParams {
	var ()
	return &RestrictApplicationsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRestrictApplicationsParamsWithTimeout creates a new RestrictApplicationsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRestrictApplicationsParamsWithTimeout(timeout time.Duration) *RestrictApplicationsParams {
	var ()
	return &RestrictApplicationsParams{

		timeout: timeout,
	}
}

// NewRestrictApplicationsParamsWithContext creates a new RestrictApplicationsParams object
// with the default values initialized, and the ability to set a context for a request
func NewRestrictApplicationsParamsWithContext(ctx context.Context) *RestrictApplicationsParams {
	var ()
	return &RestrictApplicationsParams{

		Context: ctx,
	}
}

// NewRestrictApplicationsParamsWithHTTPClient creates a new RestrictApplicationsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRestrictApplicationsParamsWithHTTPClient(client *http.Client) *RestrictApplicationsParams {
	var ()
	return &RestrictApplicationsParams{
		HTTPClient: client,
	}
}

/*RestrictApplicationsParams contains all the parameters to send to the API endpoint
for the restrict applications operation typically these are written to a http.Request
*/
type RestrictApplicationsParams struct {

	/*IDFromInclusive*/
	IDFromInclusive *int32
	/*IDToExclusive*/
	IDToExclusive *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the restrict applications params
func (o *RestrictApplicationsParams) WithTimeout(timeout time.Duration) *RestrictApplicationsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the restrict applications params
func (o *RestrictApplicationsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the restrict applications params
func (o *RestrictApplicationsParams) WithContext(ctx context.Context) *RestrictApplicationsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the restrict applications params
func (o *RestrictApplicationsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the restrict applications params
func (o *RestrictApplicationsParams) WithHTTPClient(client *http.Client) *RestrictApplicationsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the restrict applications params
func (o *RestrictApplicationsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIDFromInclusive adds the iDFromInclusive to the restrict applications params
func (o *RestrictApplicationsParams) WithIDFromInclusive(iDFromInclusive *int32) *RestrictApplicationsParams {
	o.SetIDFromInclusive(iDFromInclusive)
	return o
}

// SetIDFromInclusive adds the idFromInclusive to the restrict applications params
func (o *RestrictApplicationsParams) SetIDFromInclusive(iDFromInclusive *int32) {
	o.IDFromInclusive = iDFromInclusive
}

// WithIDToExclusive adds the iDToExclusive to the restrict applications params
func (o *RestrictApplicationsParams) WithIDToExclusive(iDToExclusive *int32) *RestrictApplicationsParams {
	o.SetIDToExclusive(iDToExclusive)
	return o
}

// SetIDToExclusive adds the idToExclusive to the restrict applications params
func (o *RestrictApplicationsParams) SetIDToExclusive(iDToExclusive *int32) {
	o.IDToExclusive = iDToExclusive
}

// WriteToRequest writes these params to a swagger request
func (o *RestrictApplicationsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IDFromInclusive != nil {

		// query param idFromInclusive
		var qrIDFromInclusive int32
		if o.IDFromInclusive != nil {
			qrIDFromInclusive = *o.IDFromInclusive
		}
		qIDFromInclusive := swag.FormatInt32(qrIDFromInclusive)
		if qIDFromInclusive != "" {
			if err := r.SetQueryParam("idFromInclusive", qIDFromInclusive); err != nil {
				return err
			}
		}

	}

	if o.IDToExclusive != nil {

		// query param idToExclusive
		var qrIDToExclusive int32
		if o.IDToExclusive != nil {
			qrIDToExclusive = *o.IDToExclusive
		}
		qIDToExclusive := swag.FormatInt32(qrIDToExclusive)
		if qIDToExclusive != "" {
			if err := r.SetQueryParam("idToExclusive", qIDToExclusive); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
