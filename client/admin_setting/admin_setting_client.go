// Code generated by go-swagger; DO NOT EDIT.

package admin_setting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new admin setting API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for admin setting API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateDockerRegistry(params *CreateDockerRegistryParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDockerRegistryOK, error)

	CreateKubeCluster(params *CreateKubeClusterParams, authInfo runtime.ClientAuthInfoWriter) (*CreateKubeClusterOK, error)

	DeleteDockerRegistry(params *DeleteDockerRegistryParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDockerRegistryOK, error)

	DeleteKubeCluster(params *DeleteKubeClusterParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteKubeClusterOK, error)

	FixUserNullPlan(params *FixUserNullPlanParams, authInfo runtime.ClientAuthInfoWriter) (*FixUserNullPlanOK, error)

	GetCurrent(params *GetCurrentParams, authInfo runtime.ClientAuthInfoWriter) (*GetCurrentOK, error)

	GetDockerRegistries(params *GetDockerRegistriesParams, authInfo runtime.ClientAuthInfoWriter) (*GetDockerRegistriesOK, error)

	GetKubeClusters(params *GetKubeClustersParams, authInfo runtime.ClientAuthInfoWriter) (*GetKubeClustersOK, error)

	GetStats(params *GetStatsParams, authInfo runtime.ClientAuthInfoWriter) (*GetStatsOK, error)

	RestrictApplications(params *RestrictApplicationsParams, authInfo runtime.ClientAuthInfoWriter) (*RestrictApplicationsOK, error)

	SetCurrent(params *SetCurrentParams, authInfo runtime.ClientAuthInfoWriter) (*SetCurrentOK, error)

	UpdateDockerRegistry(params *UpdateDockerRegistryParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateDockerRegistryOK, error)

	UpdateKubeCluster(params *UpdateKubeClusterParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateKubeClusterOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateDockerRegistry create docker registry API
*/
func (a *Client) CreateDockerRegistry(params *CreateDockerRegistryParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDockerRegistryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDockerRegistryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateDockerRegistry",
		Method:             "POST",
		PathPattern:        "/api/admin/docker/registry",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDockerRegistryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDockerRegistryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateDockerRegistry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateKubeCluster create kube cluster API
*/
func (a *Client) CreateKubeCluster(params *CreateKubeClusterParams, authInfo runtime.ClientAuthInfoWriter) (*CreateKubeClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateKubeClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateKubeCluster",
		Method:             "POST",
		PathPattern:        "/api/admin/clusters/k8s",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateKubeClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateKubeClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateKubeCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDockerRegistry delete docker registry API
*/
func (a *Client) DeleteDockerRegistry(params *DeleteDockerRegistryParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDockerRegistryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDockerRegistryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteDockerRegistry",
		Method:             "DELETE",
		PathPattern:        "/api/admin/docker/registry/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDockerRegistryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDockerRegistryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteDockerRegistry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteKubeCluster delete kube cluster API
*/
func (a *Client) DeleteKubeCluster(params *DeleteKubeClusterParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteKubeClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteKubeClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteKubeCluster",
		Method:             "DELETE",
		PathPattern:        "/api/admin/clusters/k8s/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteKubeClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteKubeClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteKubeCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FixUserNullPlan fix user null plan API
*/
func (a *Client) FixUserNullPlan(params *FixUserNullPlanParams, authInfo runtime.ClientAuthInfoWriter) (*FixUserNullPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFixUserNullPlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FixUserNullPlan",
		Method:             "PUT",
		PathPattern:        "/api/admin/maintenance/fix-user-null-plan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FixUserNullPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FixUserNullPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for FixUserNullPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCurrent get current API
*/
func (a *Client) GetCurrent(params *GetCurrentParams, authInfo runtime.ClientAuthInfoWriter) (*GetCurrentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCurrentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCurrent",
		Method:             "GET",
		PathPattern:        "/api/admin/settings",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCurrentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCurrentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCurrent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDockerRegistries get docker registries API
*/
func (a *Client) GetDockerRegistries(params *GetDockerRegistriesParams, authInfo runtime.ClientAuthInfoWriter) (*GetDockerRegistriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDockerRegistriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDockerRegistries",
		Method:             "GET",
		PathPattern:        "/api/admin/docker/registry",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDockerRegistriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDockerRegistriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDockerRegistries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetKubeClusters get kube clusters API
*/
func (a *Client) GetKubeClusters(params *GetKubeClustersParams, authInfo runtime.ClientAuthInfoWriter) (*GetKubeClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubeClustersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetKubeClusters",
		Method:             "GET",
		PathPattern:        "/api/admin/clusters/k8s",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetKubeClustersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubeClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetKubeClusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStats get stats API
*/
func (a *Client) GetStats(params *GetStatsParams, authInfo runtime.ClientAuthInfoWriter) (*GetStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStats",
		Method:             "GET",
		PathPattern:        "/api/admin/stats",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RestrictApplications restrict applications API
*/
func (a *Client) RestrictApplications(params *RestrictApplicationsParams, authInfo runtime.ClientAuthInfoWriter) (*RestrictApplicationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestrictApplicationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RestrictApplications",
		Method:             "PUT",
		PathPattern:        "/api/admin/applications/restrict",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RestrictApplicationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestrictApplicationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RestrictApplications: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetCurrent set current API
*/
func (a *Client) SetCurrent(params *SetCurrentParams, authInfo runtime.ClientAuthInfoWriter) (*SetCurrentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetCurrentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SetCurrent",
		Method:             "PUT",
		PathPattern:        "/api/admin/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetCurrentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetCurrentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SetCurrent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateDockerRegistry update docker registry API
*/
func (a *Client) UpdateDockerRegistry(params *UpdateDockerRegistryParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateDockerRegistryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDockerRegistryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateDockerRegistry",
		Method:             "PATCH",
		PathPattern:        "/api/admin/docker/registry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDockerRegistryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDockerRegistryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateDockerRegistry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateKubeCluster update kube cluster API
*/
func (a *Client) UpdateKubeCluster(params *UpdateKubeClusterParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateKubeClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateKubeClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateKubeCluster",
		Method:             "PATCH",
		PathPattern:        "/api/admin/clusters/k8s",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateKubeClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateKubeClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateKubeCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
