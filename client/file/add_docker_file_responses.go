// Code generated by go-swagger; DO NOT EDIT.

package file

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"cli/models"
)

// AddDockerFileReader is a Reader for the AddDockerFile structure.
type AddDockerFileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddDockerFileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddDockerFileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAddDockerFileUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddDockerFileForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddDockerFileOK creates a AddDockerFileOK with default headers values
func NewAddDockerFileOK() *AddDockerFileOK {
	return &AddDockerFileOK{}
}

/*AddDockerFileOK handles this case with default header values.

Success
*/
type AddDockerFileOK struct {
	Payload *models.FileDto
}

func (o *AddDockerFileOK) Error() string {
	return fmt.Sprintf("[PUT /api/file/{fid}/add-dockerfile-text][%d] addDockerFileOK  %+v", 200, o.Payload)
}

func (o *AddDockerFileOK) GetPayload() *models.FileDto {
	return o.Payload
}

func (o *AddDockerFileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FileDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddDockerFileUnauthorized creates a AddDockerFileUnauthorized with default headers values
func NewAddDockerFileUnauthorized() *AddDockerFileUnauthorized {
	return &AddDockerFileUnauthorized{}
}

/*AddDockerFileUnauthorized handles this case with default header values.

Unauthorized
*/
type AddDockerFileUnauthorized struct {
}

func (o *AddDockerFileUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/file/{fid}/add-dockerfile-text][%d] addDockerFileUnauthorized ", 401)
}

func (o *AddDockerFileUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddDockerFileForbidden creates a AddDockerFileForbidden with default headers values
func NewAddDockerFileForbidden() *AddDockerFileForbidden {
	return &AddDockerFileForbidden{}
}

/*AddDockerFileForbidden handles this case with default header values.

Forbidden
*/
type AddDockerFileForbidden struct {
}

func (o *AddDockerFileForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/file/{fid}/add-dockerfile-text][%d] addDockerFileForbidden ", 403)
}

func (o *AddDockerFileForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
