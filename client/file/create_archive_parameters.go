// Code generated by go-swagger; DO NOT EDIT.

package file

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCreateArchiveParams creates a new CreateArchiveParams object
// with the default values initialized.
func NewCreateArchiveParams() *CreateArchiveParams {
	var ()
	return &CreateArchiveParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateArchiveParamsWithTimeout creates a new CreateArchiveParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateArchiveParamsWithTimeout(timeout time.Duration) *CreateArchiveParams {
	var ()
	return &CreateArchiveParams{

		timeout: timeout,
	}
}

// NewCreateArchiveParamsWithContext creates a new CreateArchiveParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateArchiveParamsWithContext(ctx context.Context) *CreateArchiveParams {
	var ()
	return &CreateArchiveParams{

		Context: ctx,
	}
}

// NewCreateArchiveParamsWithHTTPClient creates a new CreateArchiveParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateArchiveParamsWithHTTPClient(client *http.Client) *CreateArchiveParams {
	var ()
	return &CreateArchiveParams{
		HTTPClient: client,
	}
}

/*CreateArchiveParams contains all the parameters to send to the API endpoint
for the create archive operation typically these are written to a http.Request
*/
type CreateArchiveParams struct {

	/*UploadedFile*/
	UploadedFile runtime.NamedReadCloser

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create archive params
func (o *CreateArchiveParams) WithTimeout(timeout time.Duration) *CreateArchiveParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create archive params
func (o *CreateArchiveParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create archive params
func (o *CreateArchiveParams) WithContext(ctx context.Context) *CreateArchiveParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create archive params
func (o *CreateArchiveParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create archive params
func (o *CreateArchiveParams) WithHTTPClient(client *http.Client) *CreateArchiveParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create archive params
func (o *CreateArchiveParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithUploadedFile adds the uploadedFile to the create archive params
func (o *CreateArchiveParams) WithUploadedFile(uploadedFile runtime.NamedReadCloser) *CreateArchiveParams {
	o.SetUploadedFile(uploadedFile)
	return o
}

// SetUploadedFile adds the uploadedFile to the create archive params
func (o *CreateArchiveParams) SetUploadedFile(uploadedFile runtime.NamedReadCloser) {
	o.UploadedFile = uploadedFile
}

// WriteToRequest writes these params to a swagger request
func (o *CreateArchiveParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.UploadedFile != nil {

		if o.UploadedFile != nil {

			// form file param uploadedFile
			if err := r.SetFileParam("uploadedFile", o.UploadedFile); err != nil {
				return err
			}

		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
