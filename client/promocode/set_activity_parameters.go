// Code generated by go-swagger; DO NOT EDIT.

package promocode

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSetActivityParams creates a new SetActivityParams object
// with the default values initialized.
func NewSetActivityParams() *SetActivityParams {
	var ()
	return &SetActivityParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSetActivityParamsWithTimeout creates a new SetActivityParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSetActivityParamsWithTimeout(timeout time.Duration) *SetActivityParams {
	var ()
	return &SetActivityParams{

		timeout: timeout,
	}
}

// NewSetActivityParamsWithContext creates a new SetActivityParams object
// with the default values initialized, and the ability to set a context for a request
func NewSetActivityParamsWithContext(ctx context.Context) *SetActivityParams {
	var ()
	return &SetActivityParams{

		Context: ctx,
	}
}

// NewSetActivityParamsWithHTTPClient creates a new SetActivityParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSetActivityParamsWithHTTPClient(client *http.Client) *SetActivityParams {
	var ()
	return &SetActivityParams{
		HTTPClient: client,
	}
}

/*SetActivityParams contains all the parameters to send to the API endpoint
for the set activity operation typically these are written to a http.Request
*/
type SetActivityParams struct {

	/*Code*/
	Code string
	/*IsActive*/
	IsActive *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the set activity params
func (o *SetActivityParams) WithTimeout(timeout time.Duration) *SetActivityParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the set activity params
func (o *SetActivityParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the set activity params
func (o *SetActivityParams) WithContext(ctx context.Context) *SetActivityParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the set activity params
func (o *SetActivityParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the set activity params
func (o *SetActivityParams) WithHTTPClient(client *http.Client) *SetActivityParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the set activity params
func (o *SetActivityParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCode adds the code to the set activity params
func (o *SetActivityParams) WithCode(code string) *SetActivityParams {
	o.SetCode(code)
	return o
}

// SetCode adds the code to the set activity params
func (o *SetActivityParams) SetCode(code string) {
	o.Code = code
}

// WithIsActive adds the isActive to the set activity params
func (o *SetActivityParams) WithIsActive(isActive *bool) *SetActivityParams {
	o.SetIsActive(isActive)
	return o
}

// SetIsActive adds the isActive to the set activity params
func (o *SetActivityParams) SetIsActive(isActive *bool) {
	o.IsActive = isActive
}

// WriteToRequest writes these params to a swagger request
func (o *SetActivityParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param code
	if err := r.SetPathParam("code", o.Code); err != nil {
		return err
	}

	if o.IsActive != nil {

		// query param isActive
		var qrIsActive bool
		if o.IsActive != nil {
			qrIsActive = *o.IsActive
		}
		qIsActive := swag.FormatBool(qrIsActive)
		if qIsActive != "" {
			if err := r.SetQueryParam("isActive", qIsActive); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
