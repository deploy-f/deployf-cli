// Code generated by go-swagger; DO NOT EDIT.

package promocode

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSetAmountParams creates a new SetAmountParams object
// with the default values initialized.
func NewSetAmountParams() *SetAmountParams {
	var ()
	return &SetAmountParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSetAmountParamsWithTimeout creates a new SetAmountParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSetAmountParamsWithTimeout(timeout time.Duration) *SetAmountParams {
	var ()
	return &SetAmountParams{

		timeout: timeout,
	}
}

// NewSetAmountParamsWithContext creates a new SetAmountParams object
// with the default values initialized, and the ability to set a context for a request
func NewSetAmountParamsWithContext(ctx context.Context) *SetAmountParams {
	var ()
	return &SetAmountParams{

		Context: ctx,
	}
}

// NewSetAmountParamsWithHTTPClient creates a new SetAmountParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSetAmountParamsWithHTTPClient(client *http.Client) *SetAmountParams {
	var ()
	return &SetAmountParams{
		HTTPClient: client,
	}
}

/*SetAmountParams contains all the parameters to send to the API endpoint
for the set amount operation typically these are written to a http.Request
*/
type SetAmountParams struct {

	/*Amount*/
	Amount *int32
	/*Code*/
	Code string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the set amount params
func (o *SetAmountParams) WithTimeout(timeout time.Duration) *SetAmountParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the set amount params
func (o *SetAmountParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the set amount params
func (o *SetAmountParams) WithContext(ctx context.Context) *SetAmountParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the set amount params
func (o *SetAmountParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the set amount params
func (o *SetAmountParams) WithHTTPClient(client *http.Client) *SetAmountParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the set amount params
func (o *SetAmountParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAmount adds the amount to the set amount params
func (o *SetAmountParams) WithAmount(amount *int32) *SetAmountParams {
	o.SetAmount(amount)
	return o
}

// SetAmount adds the amount to the set amount params
func (o *SetAmountParams) SetAmount(amount *int32) {
	o.Amount = amount
}

// WithCode adds the code to the set amount params
func (o *SetAmountParams) WithCode(code string) *SetAmountParams {
	o.SetCode(code)
	return o
}

// SetCode adds the code to the set amount params
func (o *SetAmountParams) SetCode(code string) {
	o.Code = code
}

// WriteToRequest writes these params to a swagger request
func (o *SetAmountParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Amount != nil {

		// query param amount
		var qrAmount int32
		if o.Amount != nil {
			qrAmount = *o.Amount
		}
		qAmount := swag.FormatInt32(qrAmount)
		if qAmount != "" {
			if err := r.SetQueryParam("amount", qAmount); err != nil {
				return err
			}
		}

	}

	// path param code
	if err := r.SetPathParam("code", o.Code); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
