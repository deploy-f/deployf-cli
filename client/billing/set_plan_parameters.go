// Code generated by go-swagger; DO NOT EDIT.

package billing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewSetPlanParams creates a new SetPlanParams object
// with the default values initialized.
func NewSetPlanParams() *SetPlanParams {
	var ()
	return &SetPlanParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSetPlanParamsWithTimeout creates a new SetPlanParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSetPlanParamsWithTimeout(timeout time.Duration) *SetPlanParams {
	var ()
	return &SetPlanParams{

		timeout: timeout,
	}
}

// NewSetPlanParamsWithContext creates a new SetPlanParams object
// with the default values initialized, and the ability to set a context for a request
func NewSetPlanParamsWithContext(ctx context.Context) *SetPlanParams {
	var ()
	return &SetPlanParams{

		Context: ctx,
	}
}

// NewSetPlanParamsWithHTTPClient creates a new SetPlanParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSetPlanParamsWithHTTPClient(client *http.Client) *SetPlanParams {
	var ()
	return &SetPlanParams{
		HTTPClient: client,
	}
}

/*SetPlanParams contains all the parameters to send to the API endpoint
for the set plan operation typically these are written to a http.Request
*/
type SetPlanParams struct {

	/*PlanName*/
	PlanName string
	/*UserID*/
	UserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the set plan params
func (o *SetPlanParams) WithTimeout(timeout time.Duration) *SetPlanParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the set plan params
func (o *SetPlanParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the set plan params
func (o *SetPlanParams) WithContext(ctx context.Context) *SetPlanParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the set plan params
func (o *SetPlanParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the set plan params
func (o *SetPlanParams) WithHTTPClient(client *http.Client) *SetPlanParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the set plan params
func (o *SetPlanParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPlanName adds the planName to the set plan params
func (o *SetPlanParams) WithPlanName(planName string) *SetPlanParams {
	o.SetPlanName(planName)
	return o
}

// SetPlanName adds the planName to the set plan params
func (o *SetPlanParams) SetPlanName(planName string) {
	o.PlanName = planName
}

// WithUserID adds the userID to the set plan params
func (o *SetPlanParams) WithUserID(userID string) *SetPlanParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the set plan params
func (o *SetPlanParams) SetUserID(userID string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *SetPlanParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param planName
	if err := r.SetPathParam("planName", o.PlanName); err != nil {
		return err
	}

	// path param userId
	if err := r.SetPathParam("userId", o.UserID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
