// Code generated by go-swagger; DO NOT EDIT.

package billing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewRobokassaCallbackParams creates a new RobokassaCallbackParams object
// with the default values initialized.
func NewRobokassaCallbackParams() *RobokassaCallbackParams {
	var ()
	return &RobokassaCallbackParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRobokassaCallbackParamsWithTimeout creates a new RobokassaCallbackParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRobokassaCallbackParamsWithTimeout(timeout time.Duration) *RobokassaCallbackParams {
	var ()
	return &RobokassaCallbackParams{

		timeout: timeout,
	}
}

// NewRobokassaCallbackParamsWithContext creates a new RobokassaCallbackParams object
// with the default values initialized, and the ability to set a context for a request
func NewRobokassaCallbackParamsWithContext(ctx context.Context) *RobokassaCallbackParams {
	var ()
	return &RobokassaCallbackParams{

		Context: ctx,
	}
}

// NewRobokassaCallbackParamsWithHTTPClient creates a new RobokassaCallbackParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRobokassaCallbackParamsWithHTTPClient(client *http.Client) *RobokassaCallbackParams {
	var ()
	return &RobokassaCallbackParams{
		HTTPClient: client,
	}
}

/*RobokassaCallbackParams contains all the parameters to send to the API endpoint
for the robokassa callback operation typically these are written to a http.Request
*/
type RobokassaCallbackParams struct {

	/*InvID*/
	InvID *int32
	/*OutSum*/
	OutSum *string
	/*ShpUID*/
	ShpUID *string
	/*SignatureValue*/
	SignatureValue *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the robokassa callback params
func (o *RobokassaCallbackParams) WithTimeout(timeout time.Duration) *RobokassaCallbackParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the robokassa callback params
func (o *RobokassaCallbackParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the robokassa callback params
func (o *RobokassaCallbackParams) WithContext(ctx context.Context) *RobokassaCallbackParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the robokassa callback params
func (o *RobokassaCallbackParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the robokassa callback params
func (o *RobokassaCallbackParams) WithHTTPClient(client *http.Client) *RobokassaCallbackParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the robokassa callback params
func (o *RobokassaCallbackParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithInvID adds the invID to the robokassa callback params
func (o *RobokassaCallbackParams) WithInvID(invID *int32) *RobokassaCallbackParams {
	o.SetInvID(invID)
	return o
}

// SetInvID adds the invId to the robokassa callback params
func (o *RobokassaCallbackParams) SetInvID(invID *int32) {
	o.InvID = invID
}

// WithOutSum adds the outSum to the robokassa callback params
func (o *RobokassaCallbackParams) WithOutSum(outSum *string) *RobokassaCallbackParams {
	o.SetOutSum(outSum)
	return o
}

// SetOutSum adds the outSum to the robokassa callback params
func (o *RobokassaCallbackParams) SetOutSum(outSum *string) {
	o.OutSum = outSum
}

// WithShpUID adds the shpUID to the robokassa callback params
func (o *RobokassaCallbackParams) WithShpUID(shpUID *string) *RobokassaCallbackParams {
	o.SetShpUID(shpUID)
	return o
}

// SetShpUID adds the shpUid to the robokassa callback params
func (o *RobokassaCallbackParams) SetShpUID(shpUID *string) {
	o.ShpUID = shpUID
}

// WithSignatureValue adds the signatureValue to the robokassa callback params
func (o *RobokassaCallbackParams) WithSignatureValue(signatureValue *string) *RobokassaCallbackParams {
	o.SetSignatureValue(signatureValue)
	return o
}

// SetSignatureValue adds the signatureValue to the robokassa callback params
func (o *RobokassaCallbackParams) SetSignatureValue(signatureValue *string) {
	o.SignatureValue = signatureValue
}

// WriteToRequest writes these params to a swagger request
func (o *RobokassaCallbackParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.InvID != nil {

		// query param InvId
		var qrInvID int32
		if o.InvID != nil {
			qrInvID = *o.InvID
		}
		qInvID := swag.FormatInt32(qrInvID)
		if qInvID != "" {
			if err := r.SetQueryParam("InvId", qInvID); err != nil {
				return err
			}
		}

	}

	if o.OutSum != nil {

		// query param OutSum
		var qrOutSum string
		if o.OutSum != nil {
			qrOutSum = *o.OutSum
		}
		qOutSum := qrOutSum
		if qOutSum != "" {
			if err := r.SetQueryParam("OutSum", qOutSum); err != nil {
				return err
			}
		}

	}

	if o.ShpUID != nil {

		// query param Shp_uid
		var qrShpUID string
		if o.ShpUID != nil {
			qrShpUID = *o.ShpUID
		}
		qShpUID := qrShpUID
		if qShpUID != "" {
			if err := r.SetQueryParam("Shp_uid", qShpUID); err != nil {
				return err
			}
		}

	}

	if o.SignatureValue != nil {

		// query param SignatureValue
		var qrSignatureValue string
		if o.SignatureValue != nil {
			qrSignatureValue = *o.SignatureValue
		}
		qSignatureValue := qrSignatureValue
		if qSignatureValue != "" {
			if err := r.SetQueryParam("SignatureValue", qSignatureValue); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
