// Code generated by go-swagger; DO NOT EDIT.

package application

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"cli/models"
)

// UpdateEnvVarReader is a Reader for the UpdateEnvVar structure.
type UpdateEnvVarReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateEnvVarReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateEnvVarOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateEnvVarUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateEnvVarForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateEnvVarOK creates a UpdateEnvVarOK with default headers values
func NewUpdateEnvVarOK() *UpdateEnvVarOK {
	return &UpdateEnvVarOK{}
}

/*UpdateEnvVarOK handles this case with default header values.

Success
*/
type UpdateEnvVarOK struct {
	Payload *models.ApplicationEnvironmentVariableDto
}

func (o *UpdateEnvVarOK) Error() string {
	return fmt.Sprintf("[PATCH /api/application/{id}/env-vars][%d] updateEnvVarOK  %+v", 200, o.Payload)
}

func (o *UpdateEnvVarOK) GetPayload() *models.ApplicationEnvironmentVariableDto {
	return o.Payload
}

func (o *UpdateEnvVarOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ApplicationEnvironmentVariableDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEnvVarUnauthorized creates a UpdateEnvVarUnauthorized with default headers values
func NewUpdateEnvVarUnauthorized() *UpdateEnvVarUnauthorized {
	return &UpdateEnvVarUnauthorized{}
}

/*UpdateEnvVarUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateEnvVarUnauthorized struct {
}

func (o *UpdateEnvVarUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/application/{id}/env-vars][%d] updateEnvVarUnauthorized ", 401)
}

func (o *UpdateEnvVarUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateEnvVarForbidden creates a UpdateEnvVarForbidden with default headers values
func NewUpdateEnvVarForbidden() *UpdateEnvVarForbidden {
	return &UpdateEnvVarForbidden{}
}

/*UpdateEnvVarForbidden handles this case with default header values.

Forbidden
*/
type UpdateEnvVarForbidden struct {
}

func (o *UpdateEnvVarForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/application/{id}/env-vars][%d] updateEnvVarForbidden ", 403)
}

func (o *UpdateEnvVarForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
