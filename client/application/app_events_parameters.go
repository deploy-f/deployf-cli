// Code generated by go-swagger; DO NOT EDIT.

package application

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewAppEventsParams creates a new AppEventsParams object
// with the default values initialized.
func NewAppEventsParams() *AppEventsParams {
	var ()
	return &AppEventsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAppEventsParamsWithTimeout creates a new AppEventsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAppEventsParamsWithTimeout(timeout time.Duration) *AppEventsParams {
	var ()
	return &AppEventsParams{

		timeout: timeout,
	}
}

// NewAppEventsParamsWithContext creates a new AppEventsParams object
// with the default values initialized, and the ability to set a context for a request
func NewAppEventsParamsWithContext(ctx context.Context) *AppEventsParams {
	var ()
	return &AppEventsParams{

		Context: ctx,
	}
}

// NewAppEventsParamsWithHTTPClient creates a new AppEventsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAppEventsParamsWithHTTPClient(client *http.Client) *AppEventsParams {
	var ()
	return &AppEventsParams{
		HTTPClient: client,
	}
}

/*AppEventsParams contains all the parameters to send to the API endpoint
for the app events operation typically these are written to a http.Request
*/
type AppEventsParams struct {

	/*Count*/
	Count *int32
	/*Page*/
	Page *int32
	/*ID*/
	ID int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the app events params
func (o *AppEventsParams) WithTimeout(timeout time.Duration) *AppEventsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the app events params
func (o *AppEventsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the app events params
func (o *AppEventsParams) WithContext(ctx context.Context) *AppEventsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the app events params
func (o *AppEventsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the app events params
func (o *AppEventsParams) WithHTTPClient(client *http.Client) *AppEventsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the app events params
func (o *AppEventsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the app events params
func (o *AppEventsParams) WithCount(count *int32) *AppEventsParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the app events params
func (o *AppEventsParams) SetCount(count *int32) {
	o.Count = count
}

// WithPage adds the page to the app events params
func (o *AppEventsParams) WithPage(page *int32) *AppEventsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the app events params
func (o *AppEventsParams) SetPage(page *int32) {
	o.Page = page
}

// WithID adds the id to the app events params
func (o *AppEventsParams) WithID(id int32) *AppEventsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the app events params
func (o *AppEventsParams) SetID(id int32) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *AppEventsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Count != nil {

		// query param Count
		var qrCount int32
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt32(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("Count", qCount); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param Page
		var qrPage int32
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("Page", qPage); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt32(o.ID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
