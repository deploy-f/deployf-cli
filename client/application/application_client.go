// Code generated by go-swagger; DO NOT EDIT.

package application

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new application API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for application API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddConfigFile(params *AddConfigFileParams, authInfo runtime.ClientAuthInfoWriter) (*AddConfigFileOK, error)

	AddVolume(params *AddVolumeParams, authInfo runtime.ClientAuthInfoWriter) (*AddVolumeOK, error)

	AppEvents(params *AppEventsParams, authInfo runtime.ClientAuthInfoWriter) (*AppEventsOK, error)

	DeleteConfigFile(params *DeleteConfigFileParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteConfigFileOK, error)

	DeleteVolume(params *DeleteVolumeParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteVolumeOK, error)

	Endpoints(params *EndpointsParams, authInfo runtime.ClientAuthInfoWriter) (*EndpointsOK, error)

	GetConfigFiles(params *GetConfigFilesParams, authInfo runtime.ClientAuthInfoWriter) (*GetConfigFilesOK, error)

	GetCustomImage(params *GetCustomImageParams, authInfo runtime.ClientAuthInfoWriter) (*GetCustomImageOK, error)

	GetEnvVars(params *GetEnvVarsParams, authInfo runtime.ClientAuthInfoWriter) (*GetEnvVarsOK, error)

	GetLogs(params *GetLogsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLogsOK, error)

	GetPorts(params *GetPortsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPortsOK, error)

	GetVolumes(params *GetVolumesParams, authInfo runtime.ClientAuthInfoWriter) (*GetVolumesOK, error)

	HasEvents(params *HasEventsParams, authInfo runtime.ClientAuthInfoWriter) (*HasEventsOK, error)

	SetCommand(params *SetCommandParams, authInfo runtime.ClientAuthInfoWriter) (*SetCommandOK, error)

	SetCustomImage(params *SetCustomImageParams, authInfo runtime.ClientAuthInfoWriter) (*SetCustomImageOK, error)

	SetEnvVars(params *SetEnvVarsParams, authInfo runtime.ClientAuthInfoWriter) (*SetEnvVarsOK, error)

	SetLimits(params *SetLimitsParams, authInfo runtime.ClientAuthInfoWriter) (*SetLimitsOK, error)

	SetPorts(params *SetPortsParams, authInfo runtime.ClientAuthInfoWriter) (*SetPortsOK, error)

	Start(params *StartParams, authInfo runtime.ClientAuthInfoWriter) (*StartOK, error)

	Status(params *StatusParams, authInfo runtime.ClientAuthInfoWriter) (*StatusOK, error)

	Stop(params *StopParams, authInfo runtime.ClientAuthInfoWriter) (*StopOK, error)

	UpdateConfigFile(params *UpdateConfigFileParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateConfigFileOK, error)

	UpdateEnvVar(params *UpdateEnvVarParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateEnvVarOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddConfigFile add config file API
*/
func (a *Client) AddConfigFile(params *AddConfigFileParams, authInfo runtime.ClientAuthInfoWriter) (*AddConfigFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddConfigFileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AddConfigFile",
		Method:             "POST",
		PathPattern:        "/api/application/{id}/config-files",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddConfigFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddConfigFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AddConfigFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddVolume add volume API
*/
func (a *Client) AddVolume(params *AddVolumeParams, authInfo runtime.ClientAuthInfoWriter) (*AddVolumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddVolumeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AddVolume",
		Method:             "POST",
		PathPattern:        "/api/application/{id}/volume",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddVolumeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddVolumeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AddVolume: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AppEvents app events API
*/
func (a *Client) AppEvents(params *AppEventsParams, authInfo runtime.ClientAuthInfoWriter) (*AppEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AppEvents",
		Method:             "GET",
		PathPattern:        "/api/application/{id}/events",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AppEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AppEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteConfigFile delete config file API
*/
func (a *Client) DeleteConfigFile(params *DeleteConfigFileParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteConfigFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteConfigFileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteConfigFile",
		Method:             "DELETE",
		PathPattern:        "/api/application/{id}/config-files/{configFileId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteConfigFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteConfigFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteConfigFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteVolume delete volume API
*/
func (a *Client) DeleteVolume(params *DeleteVolumeParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteVolumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVolumeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteVolume",
		Method:             "DELETE",
		PathPattern:        "/api/application/{id}/volume/{volumeId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVolumeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVolumeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteVolume: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Endpoints endpoints API
*/
func (a *Client) Endpoints(params *EndpointsParams, authInfo runtime.ClientAuthInfoWriter) (*EndpointsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEndpointsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Endpoints",
		Method:             "GET",
		PathPattern:        "/api/application/{id}/endpoints",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EndpointsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EndpointsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Endpoints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetConfigFiles get config files API
*/
func (a *Client) GetConfigFiles(params *GetConfigFilesParams, authInfo runtime.ClientAuthInfoWriter) (*GetConfigFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConfigFilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetConfigFiles",
		Method:             "GET",
		PathPattern:        "/api/application/{id}/config-files",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConfigFilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConfigFilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetConfigFiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCustomImage get custom image API
*/
func (a *Client) GetCustomImage(params *GetCustomImageParams, authInfo runtime.ClientAuthInfoWriter) (*GetCustomImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCustomImageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCustomImage",
		Method:             "GET",
		PathPattern:        "/api/application/{id}/custom-image",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCustomImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCustomImageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCustomImage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEnvVars get env vars API
*/
func (a *Client) GetEnvVars(params *GetEnvVarsParams, authInfo runtime.ClientAuthInfoWriter) (*GetEnvVarsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEnvVarsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEnvVars",
		Method:             "GET",
		PathPattern:        "/api/application/{id}/env-vars",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEnvVarsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEnvVarsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEnvVars: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLogs get logs API
*/
func (a *Client) GetLogs(params *GetLogsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLogs",
		Method:             "GET",
		PathPattern:        "/api/application/{id}/logs",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLogs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPorts get ports API
*/
func (a *Client) GetPorts(params *GetPortsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPortsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPortsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPorts",
		Method:             "GET",
		PathPattern:        "/api/application/{id}/ports",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPortsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPortsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPorts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVolumes get volumes API
*/
func (a *Client) GetVolumes(params *GetVolumesParams, authInfo runtime.ClientAuthInfoWriter) (*GetVolumesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVolumesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVolumes",
		Method:             "GET",
		PathPattern:        "/api/application/{id}/volume",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVolumesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVolumesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVolumes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  HasEvents has events API
*/
func (a *Client) HasEvents(params *HasEventsParams, authInfo runtime.ClientAuthInfoWriter) (*HasEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHasEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "HasEvents",
		Method:             "GET",
		PathPattern:        "/api/application/{id}/has-events",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HasEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HasEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HasEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetCommand set command API
*/
func (a *Client) SetCommand(params *SetCommandParams, authInfo runtime.ClientAuthInfoWriter) (*SetCommandOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetCommandParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SetCommand",
		Method:             "POST",
		PathPattern:        "/api/application/{id}/set-command",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetCommandReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetCommandOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SetCommand: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetCustomImage set custom image API
*/
func (a *Client) SetCustomImage(params *SetCustomImageParams, authInfo runtime.ClientAuthInfoWriter) (*SetCustomImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetCustomImageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SetCustomImage",
		Method:             "POST",
		PathPattern:        "/api/application/{id}/custom-image",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetCustomImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetCustomImageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SetCustomImage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetEnvVars set env vars API
*/
func (a *Client) SetEnvVars(params *SetEnvVarsParams, authInfo runtime.ClientAuthInfoWriter) (*SetEnvVarsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetEnvVarsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SetEnvVars",
		Method:             "PUT",
		PathPattern:        "/api/application/{id}/env-vars",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetEnvVarsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetEnvVarsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SetEnvVars: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetLimits set limits API
*/
func (a *Client) SetLimits(params *SetLimitsParams, authInfo runtime.ClientAuthInfoWriter) (*SetLimitsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetLimitsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SetLimits",
		Method:             "PUT",
		PathPattern:        "/api/application/{id}/limits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetLimitsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetLimitsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SetLimits: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetPorts set ports API
*/
func (a *Client) SetPorts(params *SetPortsParams, authInfo runtime.ClientAuthInfoWriter) (*SetPortsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetPortsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SetPorts",
		Method:             "PUT",
		PathPattern:        "/api/application/{id}/ports",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetPortsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetPortsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SetPorts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Start start API
*/
func (a *Client) Start(params *StartParams, authInfo runtime.ClientAuthInfoWriter) (*StartOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Start",
		Method:             "PUT",
		PathPattern:        "/api/application/{id}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StartReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Start: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Status status API
*/
func (a *Client) Status(params *StatusParams, authInfo runtime.ClientAuthInfoWriter) (*StatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Status",
		Method:             "GET",
		PathPattern:        "/api/application/{id}/status",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Status: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Stop stop API
*/
func (a *Client) Stop(params *StopParams, authInfo runtime.ClientAuthInfoWriter) (*StopOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Stop",
		Method:             "PUT",
		PathPattern:        "/api/application/{id}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StopReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Stop: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateConfigFile update config file API
*/
func (a *Client) UpdateConfigFile(params *UpdateConfigFileParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateConfigFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateConfigFileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateConfigFile",
		Method:             "PATCH",
		PathPattern:        "/api/application/{id}/config-files",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateConfigFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateConfigFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateConfigFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateEnvVar update env var API
*/
func (a *Client) UpdateEnvVar(params *UpdateEnvVarParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateEnvVarOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEnvVarParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateEnvVar",
		Method:             "PATCH",
		PathPattern:        "/api/application/{id}/env-vars",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateEnvVarReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateEnvVarOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateEnvVar: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
