// Code generated by go-swagger; DO NOT EDIT.

package archive_analysis

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"cli/models"
)

// AnalyseReader is a Reader for the Analyse structure.
type AnalyseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AnalyseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAnalyseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAnalyseUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAnalyseForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAnalyseOK creates a AnalyseOK with default headers values
func NewAnalyseOK() *AnalyseOK {
	return &AnalyseOK{}
}

/*AnalyseOK handles this case with default header values.

Success
*/
type AnalyseOK struct {
	Payload []*models.ArchiveAnalysisVariantDto
}

func (o *AnalyseOK) Error() string {
	return fmt.Sprintf("[GET /api/archive-analysis/{fileId}][%d] analyseOK  %+v", 200, o.Payload)
}

func (o *AnalyseOK) GetPayload() []*models.ArchiveAnalysisVariantDto {
	return o.Payload
}

func (o *AnalyseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAnalyseUnauthorized creates a AnalyseUnauthorized with default headers values
func NewAnalyseUnauthorized() *AnalyseUnauthorized {
	return &AnalyseUnauthorized{}
}

/*AnalyseUnauthorized handles this case with default header values.

Unauthorized
*/
type AnalyseUnauthorized struct {
}

func (o *AnalyseUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/archive-analysis/{fileId}][%d] analyseUnauthorized ", 401)
}

func (o *AnalyseUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAnalyseForbidden creates a AnalyseForbidden with default headers values
func NewAnalyseForbidden() *AnalyseForbidden {
	return &AnalyseForbidden{}
}

/*AnalyseForbidden handles this case with default header values.

Forbidden
*/
type AnalyseForbidden struct {
}

func (o *AnalyseForbidden) Error() string {
	return fmt.Sprintf("[GET /api/archive-analysis/{fileId}][%d] analyseForbidden ", 403)
}

func (o *AnalyseForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
