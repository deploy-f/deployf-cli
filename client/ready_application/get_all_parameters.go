// Code generated by go-swagger; DO NOT EDIT.

package ready_application

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAllParams creates a new GetAllParams object
// with the default values initialized.
func NewGetAllParams() *GetAllParams {
	var ()
	return &GetAllParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAllParamsWithTimeout creates a new GetAllParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAllParamsWithTimeout(timeout time.Duration) *GetAllParams {
	var ()
	return &GetAllParams{

		timeout: timeout,
	}
}

// NewGetAllParamsWithContext creates a new GetAllParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAllParamsWithContext(ctx context.Context) *GetAllParams {
	var ()
	return &GetAllParams{

		Context: ctx,
	}
}

// NewGetAllParamsWithHTTPClient creates a new GetAllParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAllParamsWithHTTPClient(client *http.Client) *GetAllParams {
	var ()
	return &GetAllParams{
		HTTPClient: client,
	}
}

/*GetAllParams contains all the parameters to send to the API endpoint
for the get all operation typically these are written to a http.Request
*/
type GetAllParams struct {

	/*Count*/
	Count *int32
	/*Page*/
	Page *int32
	/*Search*/
	Search *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get all params
func (o *GetAllParams) WithTimeout(timeout time.Duration) *GetAllParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get all params
func (o *GetAllParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get all params
func (o *GetAllParams) WithContext(ctx context.Context) *GetAllParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get all params
func (o *GetAllParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get all params
func (o *GetAllParams) WithHTTPClient(client *http.Client) *GetAllParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get all params
func (o *GetAllParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the get all params
func (o *GetAllParams) WithCount(count *int32) *GetAllParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get all params
func (o *GetAllParams) SetCount(count *int32) {
	o.Count = count
}

// WithPage adds the page to the get all params
func (o *GetAllParams) WithPage(page *int32) *GetAllParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get all params
func (o *GetAllParams) SetPage(page *int32) {
	o.Page = page
}

// WithSearch adds the search to the get all params
func (o *GetAllParams) WithSearch(search *string) *GetAllParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the get all params
func (o *GetAllParams) SetSearch(search *string) {
	o.Search = search
}

// WriteToRequest writes these params to a swagger request
func (o *GetAllParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Count != nil {

		// query param Count
		var qrCount int32
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt32(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("Count", qCount); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param Page
		var qrPage int32
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("Page", qPage); err != nil {
				return err
			}
		}

	}

	if o.Search != nil {

		// query param Search
		var qrSearch string
		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {
			if err := r.SetQueryParam("Search", qSearch); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
