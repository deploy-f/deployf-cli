// Code generated by go-swagger; DO NOT EDIT.

package notification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new notification API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for notification API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetUnreadedCount(params *GetUnreadedCountParams, authInfo runtime.ClientAuthInfoWriter) (*GetUnreadedCountOK, error)

	MarkAsReaded(params *MarkAsReadedParams, authInfo runtime.ClientAuthInfoWriter) (*MarkAsReadedOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetUnreadedCount get unreaded count API
*/
func (a *Client) GetUnreadedCount(params *GetUnreadedCountParams, authInfo runtime.ClientAuthInfoWriter) (*GetUnreadedCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUnreadedCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUnreadedCount",
		Method:             "GET",
		PathPattern:        "/api/notification/unreaded/count",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUnreadedCountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUnreadedCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUnreadedCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MarkAsReaded mark as readed API
*/
func (a *Client) MarkAsReaded(params *MarkAsReadedParams, authInfo runtime.ClientAuthInfoWriter) (*MarkAsReadedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMarkAsReadedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MarkAsReaded",
		Method:             "PUT",
		PathPattern:        "/api/notification/{id}/mark-as-readed",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MarkAsReadedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MarkAsReadedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MarkAsReaded: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
