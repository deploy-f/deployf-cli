// Code generated by go-swagger; DO NOT EDIT.

package notification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// MarkAsReadedReader is a Reader for the MarkAsReaded structure.
type MarkAsReadedReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MarkAsReadedReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMarkAsReadedOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewMarkAsReadedUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewMarkAsReadedForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewMarkAsReadedOK creates a MarkAsReadedOK with default headers values
func NewMarkAsReadedOK() *MarkAsReadedOK {
	return &MarkAsReadedOK{}
}

/*MarkAsReadedOK handles this case with default header values.

Success
*/
type MarkAsReadedOK struct {
	Payload bool
}

func (o *MarkAsReadedOK) Error() string {
	return fmt.Sprintf("[PUT /api/notification/{id}/mark-as-readed][%d] markAsReadedOK  %+v", 200, o.Payload)
}

func (o *MarkAsReadedOK) GetPayload() bool {
	return o.Payload
}

func (o *MarkAsReadedOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMarkAsReadedUnauthorized creates a MarkAsReadedUnauthorized with default headers values
func NewMarkAsReadedUnauthorized() *MarkAsReadedUnauthorized {
	return &MarkAsReadedUnauthorized{}
}

/*MarkAsReadedUnauthorized handles this case with default header values.

Unauthorized
*/
type MarkAsReadedUnauthorized struct {
}

func (o *MarkAsReadedUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/notification/{id}/mark-as-readed][%d] markAsReadedUnauthorized ", 401)
}

func (o *MarkAsReadedUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMarkAsReadedForbidden creates a MarkAsReadedForbidden with default headers values
func NewMarkAsReadedForbidden() *MarkAsReadedForbidden {
	return &MarkAsReadedForbidden{}
}

/*MarkAsReadedForbidden handles this case with default header values.

Forbidden
*/
type MarkAsReadedForbidden struct {
}

func (o *MarkAsReadedForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/notification/{id}/mark-as-readed][%d] markAsReadedForbidden ", 403)
}

func (o *MarkAsReadedForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
